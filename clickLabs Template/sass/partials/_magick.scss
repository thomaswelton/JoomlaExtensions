@mixin paddedColumn($cols: $blueprint-grid-columns){
	@include append(1);
	@include prepend(1);
	@include column($blueprint-grid-columns - 2, lastCol);
}

@mixin generateCornerImages($image-border-radius,$image-color,$border-width:0px,$border-color:$image-color){
	$spritePath:'sprites/cornerSprite/';
	$spritePrefix: 'c'+$image-border-radius+red($image-color)+green($image-color)+blue($image-color)+$border-width+red($border-color)+green($border-color)+blue($border-color);
	
	@if no_file($spritePath+$spritePrefix+'-tl'){
		$tlImage:magick-sprite($spritePath+$spritePrefix+'-tl', 
				magick-canvas($image-border-radius * 2, $image-border-radius * 2,
				magick-fill($image-color)
				magick-corners($image-border-radius)
				magick-border($border-color, $image-border-radius, $border-width)
				magick-crop(0, 0, $image-border-radius, $image-border-radius)
			)
		);
	};
	
	@if no_file($spritePath+$spritePrefix+'-tr'){
		$trImage:magick-sprite($spritePath+$spritePrefix+'-tr', 
				magick-canvas($image-border-radius * 2, $image-border-radius * 2,
					magick-fill($image-color)
					magick-corners($image-border-radius)
					magick-border($border-color, $image-border-radius, $border-width)
					magick-crop($image-border-radius, 0, $image-border-radius * 2, $image-border-radius)
			)
		);
	};
	
	@if no_file($spritePath+$spritePrefix+'-bl'){
		$blImage:magick-sprite($spritePath+$spritePrefix+'-bl', 
				magick-canvas($image-border-radius * 2, $image-border-radius * 2,
					magick-fill($image-color)
					magick-corners($image-border-radius)
					magick-border($border-color, $image-border-radius, $border-width)
					magick-crop(0, $image-border-radius, $image-border-radius, $image-border-radius * 2)
	  			)
			);
	};
	
	@if no_file($spritePath+$spritePrefix+'-br'){
		$brImage:magick-sprite($spritePath+$spritePrefix+'-br', 
				magick-canvas($image-border-radius * 2, $image-border-radius * 2,
					magick-fill($image-color)
					magick-corners($image-border-radius)
					magick-border($border-color, $image-border-radius, $border-width)
					magick-crop($image-border-radius, $image-border-radius, $image-border-radius * 2, $image-border-radius * 2)
			)
		);
	};

}

/*
	Mixin used to create a css 3 rounded corner box with css 2 image fall back.
*/
@mixin roundedCorners($positions,$image-border-radius,$image-color,$border-width:0px,$border-color:$image-color){
	$spritePath:'sprites/cornerSprite/';
	$spritePrefix: 'c'+$image-border-radius+red($image-color)+green($image-color)+blue($image-color)+$border-width+red($border-color)+green($border-color)+blue($border-color);
	
	@include generateCornerImages($image-border-radius,$image-color,$border-width,$border-color);
	$cornersMap: sprite-map($spritePath+"*.png",$cornersMap-position: 100%, $cornersMap-spacing: 15px, $cornersMap-repeat: no-repeat);
	
	$top:false;
	$bottom:false;
	$tl:false; 
	$tr:false; 
	$bl:false; 
	$br:false;
	
	@each $position in $positions{
		@if $position == 'tl'{
			$top: true;
			$tl: true;
		}@else if $position == 'tr'{
			$top: true;
			$tr: true;
		}@else if $position == 'bl'{
			$bottom: true;
			$bl: true;
		}@else if $position == 'br'{
			$bottom: true;
			$br: true;
		}
	}
	
	
	@if $top {
		margin-top:$image-border-radius;
		.rounded-content{
			margin-top:($image-border-radius * -1);
			padding-top:$border-width;
		}
		
		@if $tl{
			.tl{
				background-image: sprite-url($cornersMap);
				background-position: sprite-position($cornersMap, $spritePrefix+'-tl');
				@include background-image(linear-gradient($border-color, $border-color));
				@include border-top-left-radius($image-border-radius);
				
				span{
					bottom:0;	right:0;
					@include border-top-left-radius($image-border-radius);
				}
			}
		}
		@if $tr{
			.tr{
				background-image: sprite-url($cornersMap);
				background-position: sprite-position($cornersMap, $spritePrefix+'-tr');
				@include background-image(linear-gradient($border-color, $border-color));
				@include border-top-right-radius($image-border-radius);
				
				span{
					bottom:0;	left:0;
					@include border-top-right-radius($image-border-radius);
				}
			}
		}
	}
	@if $bottom{
		margin-bottom:$image-border-radius;
		.rounded-content{
			margin-bottom:($image-border-radius * -1);
			padding-bottom:$border-width;
		}
		
		@if $bl{
			.bl{
				background-image: sprite-url($cornersMap);
				background-position: sprite-position($cornersMap, $spritePrefix+'-bl');
			 	@include background-image(linear-gradient($border-color, $border-color));
				@include border-bottom-left-radius($image-border-radius);
				
				span{
					top:0;	right:0;
					@include border-bottom-left-radius($image-border-radius);
				}
			}
		}
		@if $br{
			.br{
				background-image: sprite-url($cornersMap);
				background-position: sprite-position($cornersMap, $spritePrefix+'-br');
				@include background-image(linear-gradient($border-color, $border-color));
				@include border-bottom-right-radius($image-border-radius);
				
				span{
					top:0;	left:0;
					@include border-bottom-right-radius($image-border-radius);
				}
			}
		}
	}
	
	position:relative;
	z-index:1;
	
	.rounded-content{
		@include column-base(lastCol);
		width:100%;
		z-index:1;
		.rounded-content-bg{
			z-index:-2;
			top:0; left:0; right:0px;
			background:$image-color;
			position:absolute;
			height:100%;
			
			border-left: $border-width solid $border-color;
			border-right: $border-width solid $border-color;
			
			.rounded-fill-width{
				position:relative;
				margin:0px $image-border-radius;
				height:100%;	
			}
		}
	}
	.tl, .tr, .bl, .br{
		z-index:-1;
		width:$image-border-radius;
		height:$image-border-radius;
		position:absolute !important;
		
		span{
			@include background-image(linear-gradient($image-color,$image-color));
			width:$image-border-radius - $border-width;
			height:$image-border-radius - $border-width;
			position:absolute;
		}
	}
	.tl, .bl{
		left:0px;
	}
	.tr, .br{
		right:0px
	}
	.tl, .tr{
		top:- 1 * $image-border-radius;
	}
	.bl, .br{
		bottom:- 1 * $image-border-radius;
	}
	.tf, .bf{
		z-index:-2;
		background:$image-color;
		height:$image-border-radius + (-1 * $border-width);
		position:absolute;
		width: 100%;
		padding: 0px $border-width;
	}
	.tf{
		top:- 1 * $image-border-radius;
		border-top:$border-width $border-color solid;
		@if $tl{
			left:(0px + (-1 * $border-width));
		}@else{
			left:(-1 * $border-width) + (-1 * $image-border-radius);
			border-left:$border-width $border-color solid;
			padding-left:$image-border-radius;
		}
		@if $tr == false{
			border-right:$border-width $border-color solid;
			padding-right:$image-border-radius;
		}
	}
	.bf{
		bottom:- 1 * $image-border-radius;
		border-bottom:$border-width $border-color solid;
		@if $bl == true{
			left:(0px + (-1 * $border-width));
		}@else{
			left:(-1 * $border-width) + (-1 * $image-border-radius);
			border-left:$border-width $border-color solid;
			padding-left:$image-border-radius;
		}
		@if $br == false {
			border-right:$border-width $border-color solid;
			padding-right:$image-border-radius;
		}
	}
}